package com.geppetto.braintree.dao;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.geppetto.braintree.dao.support.DeleteOrderDetail;
import com.geppetto.braintree.dao.support.InsertOrder;
import com.geppetto.braintree.dao.support.InsertOrderDetail;
import com.geppetto.braintree.dao.support.OrderDetailMapper;
import com.geppetto.braintree.dao.support.OrderMapper;
import com.geppetto.braintree.dao.support.UpdateOrder;
import com.geppetto.braintree.dao.support.UpdateOrderDetail;
import com.geppetto.braintree.dto.Order;
import com.geppetto.braintree.dto.OrderDetail;
import com.geppetto.braintree.interfaces.dao.IOrderDao;

/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Repository("OrderDao")
public class OrderDao implements IOrderDao {
	
	private DataSource dataSource;
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	private InsertOrder insert_order;
	private InsertOrderDetail insert_order_detail;
	
	private UpdateOrder update_order;
	private UpdateOrderDetail update_order_detail;
	private DeleteOrderDetail delete_order_detail;
	
	@Value("${insert_order.sql}")
	private String insert_order_sql;
	
	@Value("${insert_order_detail.sql}")
	private String insert_order_detail_sql;
	
	@Value("${get_order.sql}")
	private String get_order_sql;
	
	@Value("${get_order_detail.sql}")
	private String get_order_detail_sql;
	
	@Value("${update_order.sql}")
	private String update_order_sql;
	
	@Value("${update_order_detail.sql}")
	private String update_order_detail_sql;
	
	@Value("${delete_order_detail.sql}")
	private String delete_order_detail_sql;

	@Resource(name = "dataSource")
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(
				dataSource);
	}

	public DataSource getDataSource() {
		return dataSource;
	}
	
	@Override
	public Order insert_order(Order order) throws Exception {
				
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("customer_id", order.getCustomer().getId());
			paramMap.put("order_date", new Date());
			paramMap.put("status", "saved");

			KeyHolder keyHolder = new GeneratedKeyHolder();
			InsertOrder.SQL_INSERT_ORDER = insert_order_sql;
			this.insert_order = new InsertOrder(this.dataSource);
			this.insert_order.updateByNamedParam(paramMap, keyHolder);
			order.setId(keyHolder.getKey().longValue());
			System.out.println("The order id is: " + order.getId());

			return order;
	}

	@Override
	public OrderDetail insert_order_detail(OrderDetail order_detail) throws Exception {

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("order_id", order_detail.getOrder_id());
		paramMap.put("product_id", order_detail.getProduct_id());
		paramMap.put("quantity", order_detail.getQuantity());

		KeyHolder keyHolder = new GeneratedKeyHolder();
		InsertOrderDetail.SQL_INSERT_ORDER_DETAIL = insert_order_detail_sql;
		this.insert_order_detail = new InsertOrderDetail(this.dataSource);
		this.insert_order_detail.updateByNamedParam(paramMap, keyHolder);
		order_detail.setId(keyHolder.getKey().longValue());
		System.out.println("The order_detail id is: " + order_detail.getId());

		return order_detail;
	}

	@Override
	public Order get_order() throws Exception {
		
		MapSqlParameterSource parameters;
		parameters = new MapSqlParameterSource();
		parameters.addValue("status", "saved");
		
		OrderMapper order_mapper = new OrderMapper();
		
		List<Order> dto_list = this.namedParameterJdbcTemplate.query(get_order_sql, parameters,
				order_mapper);
		
		if (dto_list.size() < 1) { return null; }
		 
		System.out.println("######### - In OrderDao -  get_order dto_list.size() is: " + dto_list.size()
				+ " #######################");
				
		Order order = dto_list.get(0);
		order.setOrder_detail(new ArrayList<OrderDetail>());
		
		parameters.addValue("orderid", order.getId());
		OrderDetailMapper detail_mapper = new OrderDetailMapper();
		
		List<OrderDetail> detail_list = this.namedParameterJdbcTemplate.query(get_order_detail_sql, parameters,
				detail_mapper);
		
//		if (detail_list.size() < 1) { throw new Exception("No order detail found"); }
		 
		System.out.println("######### - In OrderDao -  get_order detail_list.size() is: " + detail_list.size()
				+ " #######################");		
		
		
		for (OrderDetail orderDetail : detail_list) {
			order.getOrder_detail().add(orderDetail);
		}
		
		return order;
	}

	@Override
	public void update_order() throws Exception {
				
		Order order = this.get_order();
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("id", order.getId());
		paramMap.put("customer_id", order.getCustomer().getId());
		paramMap.put("order_date", order.getOrder_date());
		paramMap.put("status", "processed");		

		UpdateOrder.SQL_UPDATE_ORDER = update_order_sql;
		this.update_order = new UpdateOrder(this.dataSource);
		this.update_order.updateByNamedParam(paramMap);
				
	}

	@Override
	public void remove_product(long product_id) throws Exception {

		Order order = this.get_order();
		List<OrderDetail> order_detail_list = order.getOrder_detail();
		
		OrderDetail order_detail = null;;
		
		for (OrderDetail orderDetail : order_detail_list) {
			if(orderDetail.getProduct_id() == product_id){
				order_detail = orderDetail;
			}
		}
		
		Map<String, Object> paramMap = new HashMap<String, Object>();				
		paramMap.put("id", order_detail.getId());

		DeleteOrderDetail.SQL_DELETE_ORDER_DETAIL = delete_order_detail_sql;
		this.delete_order_detail = new DeleteOrderDetail(this.dataSource);
		this.delete_order_detail.updateByNamedParam(paramMap);
		
	}

	@Override
	public void update_order_detail(long product_id, int quantity)
			throws Exception {
		
		Order order = this.get_order();
		List<OrderDetail> order_detail_list = order.getOrder_detail();
		
		OrderDetail order_detail = null;;
		
		for (OrderDetail orderDetail : order_detail_list) {
			if(orderDetail.getProduct_id() == product_id){
				order_detail = orderDetail;
			}
		}

		Map<String, Object> paramMap = new HashMap<String, Object>();	
		paramMap.put("id", order_detail.getId());		
		paramMap.put("quantity", quantity);
		
		UpdateOrderDetail.SQL_UDPATE_ORDER_DETAIL = update_order_detail_sql;
		this.update_order_detail = new UpdateOrderDetail(dataSource);
		this.update_order_detail.updateByNamedParam(paramMap);
		
	}

}

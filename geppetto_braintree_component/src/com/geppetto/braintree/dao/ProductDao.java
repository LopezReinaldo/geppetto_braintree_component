package com.geppetto.braintree.dao;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.geppetto.braintree.dao.support.ProductMapper;
import com.geppetto.braintree.dto.Product;
import com.geppetto.braintree.interfaces.dao.IProductDao;

/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Repository("ProductDao")
public class ProductDao implements IProductDao {
	
	private static final Logger LOG = LoggerFactory.getLogger(ProductDao.class);
	
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	
	private DataSource dataSource;
	
	@Value("${get_all_products.sql}")
	private String get_all_products_sql;
	
	@Value("${get_product_by_id.sql}")
	private String get_product_by_id_sql;
	
	@Resource(name = "dataSource")
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
	}

	@Override
	public ArrayList<Product> get_products() throws Exception {
		
		MapSqlParameterSource parameters;
		parameters = new MapSqlParameterSource();

		ProductMapper product_mapper = new ProductMapper();
		List<Product> dto_list = this.namedParameterJdbcTemplate.query(get_all_products_sql, parameters,
				product_mapper);
		
		if (dto_list.size() < 1) { throw new Exception("No products found"); }
		 
		System.out.println("######### - In ProductDao -  get_products dto_list.size() is: " + dto_list.size()
				+ " #######################");

		return (ArrayList<Product>) dto_list;				
	}

	@Override
	public Product get_product_by_id(long id) throws Exception {

		MapSqlParameterSource parameters;
		parameters = new MapSqlParameterSource();
		parameters.addValue("productid", id);

		ProductMapper product_mapper = new ProductMapper();
		List<Product> dto_list = this.namedParameterJdbcTemplate.query(get_product_by_id_sql, parameters,
				product_mapper);
		
		if (dto_list.size() < 1) { throw new Exception("No products found"); }
		 
		System.out.println("######### - In ProductDao -  get_products dto_list.size() is: " + dto_list.size()
				+ " #######################");

		return dto_list.get(0);
	}

}
